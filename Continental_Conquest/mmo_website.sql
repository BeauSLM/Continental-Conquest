DROP DATABASE IF EXISTS CONTINENTAL_CONQUEST;
CREATE DATABASE CONTINENTAL_CONQUEST; 

USE CONTINENTAL_CONQUEST;

-- MYSQL DIDN'T ALLOW US TO USE CHARACTER AS A TABLE RENAMED TO CHARACTERS.
/*
DROP TABLE IF EXISTS CHAR_BAG;
DROP TABLE IF EXISTS CHAR_SLOTS;
DROP TABLE IF EXISTS ITEM_STATS;
DROP TABLE IF EXISTS ITEM_CLASS_REQ;
DROP TABLE IF EXISTS ITEM;
DROP TABLE IF EXISTS RACE_ABILITY;
DROP TABLE IF EXISTS CLASS_ABILITY;
DROP TABLE IF EXISTS ABILITY;
DROP TABLE IF EXISTS CHAR_SLOTS;
DROP TABLE IF EXISTS PARTY;
DROP TABLE IF EXISTS CHARACTERS;
DROP TABLE IF EXISTS GUILD;
DROP TABLE IF EXISTS ADMINS;
DROP TABLE IF EXISTS PLAYERS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS FRIENDLIST;
DROP TABLE IF EXISTS TICKET;
*/

CREATE TABLE USERS (
	Acct_ID INTEGER auto_increment,
	Fname VARCHAR(20) NOT NULL,
	Lname VARCHAR(20) NOT NULL,
	Username VARCHAR(20) NOT NULL,
    Password VARCHAR(16) NOT NULL,
	Birthday DATE NOT NULL,
	Email VARCHAR(40) NOT NULL,
	PRIMARY KEY (Acct_ID)
);

-- NEED TO USE NULL FOR PLAYERS WHEN INSERTING THEM IF GUILDS HAVE NOT BEEN SUBMITTED YET!
-- OR INSERT GUILDS FIRST ASSIGN LEADER AS NULL AND THEN UPDATE OR CHANGE GUILD TO NOT 
-- CONSTRAIN A FOREIGN KEY TO PLAYER TABLE.
CREATE TABLE PLAYERS (
	Player_ID INTEGER NOT NULL,
    Playtime VARCHAR(30) NOT NULL,
    Sub_status VARCHAR(20) NOT NULL,
	Guild VARCHAR(30) DEFAULT NULL,
    PRIMARY KEY (Player_ID),
    FOREIGN KEY (Player_ID) REFERENCES USERS (Acct_ID)
);

CREATE TABLE ADMINS (
	Admin_ID INTEGER NOT NULL,
    Perm_level INTEGER NOT NULL,
    PRIMARY KEY (Admin_ID),
    FOREIGN KEY (Admin_ID) REFERENCES USERS (Acct_ID) 
);

CREATE TABLE GUILD (
	Guild_name VARCHAR(30) NOT NULL,
    Leader_ID INTEGER NOT NULL,
    XP INTEGER NOT NULL,
    Level INTEGER NOT NULL,
    Gold INTEGER NOT NULL,
    PRIMARY KEY (Guild_name),
    FOREIGN KEY (Leader_ID) REFERENCES PLAYERS (Player_ID) 
);

--
ALTER TABLE PLAYERS 
ADD FOREIGN KEY (GUILD) REFERENCES GUILD (Guild_name);

CREATE TABLE FRIEND_LIST (
	Acct_ID INTEGER NOT NULL,
    Friend_ID INTEGER NOT NULL,
    PRIMARY KEY (Acct_ID, Friend_ID),
    FOREIGN KEY (Acct_ID) REFERENCES PLAYERS (Player_ID),
    FOREIGN KEY (Friend_ID) REFERENCES PLAYERS (Player_ID)
);

CREATE TABLE TICKET (
	Ticket_ID INTEGER NOT NULL auto_increment,
    Issue VARCHAR(500) NOT NULL,
    Category VARCHAR(30) NOT NULL,
    Date DATE NOT NULL,
    Player_ID INTEGER NOT NULL,
    Admin_ID INTEGER,
    Status VARCHAR(15) NOT NULL,
	PRIMARY KEY (Ticket_ID),
    FOREIGN KEY (Player_ID) REFERENCES PLAYERS (Player_ID),
    FOREIGN KEY (Admin_ID) REFERENCES ADMINS (Admin_ID)
);

CREATE TABLE CLASS (
	Name VARCHAR(30) NOT NULL,
    Description VARCHAR(300) NOT NULL,
    PRIMARY KEY (Name)
);

CREATE TABLE RACE (
	Name VARCHAR(30) NOT NULL,
    Description VARCHAR(300) NOT NULL,
    PRIMARY KEY(Name)
);

CREATE TABLE CHARACTERS (
	Acct_ID INTEGER NOT NULL,
    Name VARCHAR(20) NOT NULL UNIQUE,
    Lvl INTEGER NOT NULL,
    XP INTEGER NOT NULL,
    Gold INTEGER NOT NULL,
    Location VARCHAR(30) NOT NULL,
    Race VARCHAR(30) NOT NULL,
    Class VARCHAR(30) NOT NULL,
    Party_ID INTEGER,
    PRIMARY KEY(Acct_ID, Name),
    FOREIGN KEY (Acct_ID) REFERENCES PLAYERS (Player_ID),
    FOREIGN KEY (Race) REFERENCES RACE (Name),
    FOREIGN KEY (Class) REFERENCES CLASS (Name)
);

CREATE TABLE PARTY (
		Party_id INTEGER NOT NULL,
		Acct_ID INTEGER NOT NULL,
    Ch_name VARCHAR(20) NOT NULL,
    PRIMARY KEY (Party_id, Acct_ID, Ch_name),
    FOREIGN KEY (Acct_ID) REFERENCES PLAYERS (Player_ID),
		FOREIGN KEY (Ch_name) REFERENCES CHARACTERS (Name)
);

ALTER TABLE CHARACTERS 
ADD FOREIGN KEY (Party_ID) REFERENCES PARTY (Party_id);

CREATE TABLE ABILITY (
	Name VARCHAR(30) NOT NULL,
    Mana_Cost INTEGER NOT NULL,
    Description VARCHAR(300) NOT NULL,
    Damage INTEGER,
    Lv_Req INTEGER NOT NULL,
    Cooldown INTEGER NOT NULL,
    PRIMARY KEY (Name)
);

CREATE TABLE RACE_ABILITY (
	Abil_name VARCHAR(30) NOT NULL,
    Race VARCHAR(30) NOT NULL,
    PRIMARY KEY(Abil_name, Race),
    FOREIGN KEY (Abil_name) REFERENCES ABILITY (Name),
    FOREIGN KEY (Race) REFERENCES RACE (Name)
);

CREATE TABLE CLASS_ABILITY (
	Abil_name VARCHAR(30) NOT NULL,
    Class VARCHAR(30) NOT NULL,
    PRIMARY KEY (Abil_name, Class),
    FOREIGN KEY (Abil_name) REFERENCES ABILITY (Name),
    FOREIGN KEY (Class) REFERENCES CLASS (Name)
);

CREATE TABLE ITEM (
	Item_ID INTEGER AUTO_INCREMENT,
    Name VARCHAR(50) NOT NULL,
    Type VARCHAR(30) NOT NULL,
    Sell_price INTEGER NOT NULL,
    Rarity VARCHAR(30) NOT NULL,
    Description VARCHAR(100) DEFAULT NULL,
    Item_Category VARCHAR(30) NOT NULL,
    Base_Dmg VARCHAR(30),
    Base_Def VARCHAR(30),
    PRIMARY KEY (Item_ID)
);
CREATE TABLE ITEM_CLASS_REQ (
	Item_ID INTEGER NOT NULL,
    Class VARCHAR(30) NOT NULL,
    PRIMARY KEY (Item_ID, Class),
    FOREIGN KEY (Item_ID) REFERENCES ITEM (Item_ID),
    FOREIGN KEY (Class) REFERENCES CLASS (Name)
);

CREATE TABLE ITEM_STATS (
	Item_ID INTEGER,
    Atk INTEGER,
    Def INTEGER,
    HP INTEGER,
    MP INTEGER,
    Spd INTEGER,
    PRIMARY KEY (Item_ID),
    FOREIGN KEY (Item_ID) REFERENCES ITEM (Item_ID)
);

CREATE TABLE CHAR_SLOTS (
	Acc_ID INTEGER NOT NULL,
    Char_Name VARCHAR(30),
    Item_ID INTEGER,
    Slot_Type VARCHAR(30),
    PRIMARY KEY (Acc_ID, Char_Name, Slot_Type),
    FOREIGN KEY (Acc_ID) REFERENCES PLAYERS (Player_ID),
    FOREIGN KEY (Char_Name) REFERENCES CHARACTERS (Name),
    FOREIGN KEY (Item_ID) REFERENCES ITEM (Item_ID)
);

CREATE TABLE CHAR_BAG (
	Acc_ID INTEGER NOT NULL,
    Char_Name VARCHAR(30) NOT NULL,
    Item_ID INTEGER NOT NULL,
    PRIMARY KEY(Acc_ID, Char_Name, Item_ID),
	FOREIGN KEY(Acc_ID, Char_Name) REFERENCES CHARACTERS (Acct_ID, Name),
    FOREIGN KEY (Item_ID) REFERENCES ITEM (Item_ID)
);

CREATE TABLE CHAR_STATS (
	Acc_ID INTEGER NOT NULL,
    Char_Name VARCHAR(30) NOT NULL,
    Atk INTEGER NOT NULL,
    Def INTEGER NOT NULL,
    HP INTEGER NOT NULL,
    MP INTEGER NOT NULL,
    Spd INTEGER NOT NULL,
    PRIMARY KEY (Acc_ID, Char_Name),
    FOREIGN KEY (Acc_ID) REFERENCES CHARACTERS (Acct_ID),
    FOREIGN KEY (Char_Name) REFERENCES CHARACTERS (Name)
);